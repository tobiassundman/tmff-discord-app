// Code generated by go-bindata.
// sources:
// db/migrations/1_create-tables.up.sql
// db/migrations/2_create-s1.up.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_createTablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xd1\x8e\xa2\x40\x10\x7c\xe7\x2b\xfa\x11\x93\xf5\x0b\xee\x89\xf3\xda\x0d\x39\x1d\xf7\xc6\x21\xd9\x7d\x22\x2d\xf4\xea\x24\xec\x60\x60\xee\x92\xfb\xfb\x0b\x0c\xea\xb8\x08\x9e\xae\x8f\x5a\x3d\x95\xea\xae\x2a\xa6\x53\xd8\x17\xf4\x97\xab\x1a\x2c\x6d\x0a\x86\xac\x34\x96\xb4\xa9\x81\x8a\xe2\x04\xed\xc8\xc2\x9e\x2a\xab\x33\xbd\x27\xcb\xa0\x0d\xd8\x1d\x43\xc1\xb4\xfd\xcd\xc1\x4c\x62\xa4\x10\x54\xf4\x7d\x81\x10\xcf\x41\xac\x14\xe0\x6b\xbc\x56\xeb\x23\x43\x18\x00\x00\xe8\x1c\x62\xa1\xf0\x19\x25\xbc\xc8\x78\x19\xc9\x37\xf8\x89\x6f\x10\x25\x6a\x15\x8b\x99\xc4\x25\x0a\xf5\xd4\x4e\x6e\xb6\x94\xea\x1c\x14\xbe\xaa\x96\x4e\x24\x8b\x05\x24\x22\xfe\x95\xa0\x1b\x30\xf4\xc1\x23\x70\x56\x31\x59\xce\x53\xb2\xa0\xe2\x25\xae\x55\xb4\x7c\x81\x1f\x38\x8f\x92\x85\x82\x59\x22\x25\x0a\x95\x9e\x90\x03\x47\x30\xf9\x16\x04\xd3\x29\xd4\x4c\x75\x69\x2e\xde\xe4\x08\x35\x37\xd9\xd1\x1f\x86\x0d\xb3\x71\x8b\xe6\x63\xa7\x38\x3c\x0c\x3f\xe9\xf7\x2e\xf1\x40\xed\xe9\xd1\x2e\x63\xaf\x7b\xdb\xee\xe1\x19\x9c\x37\x0e\x53\x47\x05\x64\xf2\xc6\x6e\x5d\x1d\xfe\xe0\xa2\xbc\xbe\xe9\xb9\x82\x5b\x03\xd0\x71\xf4\x6d\x76\xb0\x53\x9f\x7a\x7c\xe7\x38\x17\xe5\x00\xb2\xa5\x0f\xae\x53\x67\xd7\xc0\xc8\x9d\x06\xb8\xc7\x2e\x85\xa1\xa7\xff\xe9\xa4\x76\xe2\x66\xe6\x2b\x89\xf1\xb3\x68\x76\xf7\x07\x27\x20\x71\x8e\x12\xc5\x0c\x8f\x71\x09\x5b\xa0\xff\xec\x44\xe9\x3f\xea\x4c\x0d\x75\x3e\x39\xc4\xa1\xdd\xf7\x52\x00\x3a\xe0\x52\x8c\x3b\xf7\xf7\x9c\xe9\x77\x9d\x75\x52\xc6\x1c\x77\x5c\x61\xaf\xba\xbd\x6c\x5f\xb1\xf5\x4b\x97\xbf\xf9\xaa\xfe\x89\x1e\xd2\x97\x86\xc8\x6f\x4b\x56\x56\xee\x77\x13\xc7\x6c\x47\x66\x3b\xfa\xb1\xec\xeb\xb8\xb5\x35\x2d\xc3\xe7\xef\xe6\xff\x35\xc6\x89\x1d\x6c\x53\xea\xe4\x8f\x0c\x6c\xf8\x7d\x98\xe1\x11\x95\xea\x96\x1b\xaf\x53\x37\x74\x66\x7a\x9b\xce\xd0\xe5\xf2\xde\x2a\xfd\x0b\x00\x00\xff\xff\xfa\x0b\xed\x86\x29\x07\x00\x00")

func _1_createTablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_createTablesUpSql,
		"1_create-tables.up.sql",
	)
}

func _1_createTablesUpSql() (*asset, error) {
	bytes, err := _1_createTablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create-tables.up.sql", size: 1833, mode: os.FileMode(493), modTime: time.Unix(1728924391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_createS1UpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x28\x4e\x4d\x2c\xce\xcf\x2b\x56\xd0\xc8\x4b\xcc\x4d\xd5\x54\x08\x73\xf4\x09\x75\x0d\x56\xd0\x50\x77\xcb\x2c\x2a\x2e\x51\x70\x4b\xcc\x53\x70\x4b\x4c\x2e\xc9\xcc\xcf\x53\x08\x06\xab\x54\xd7\xb4\x06\x04\x00\x00\xff\xff\x65\x7f\x00\x4f\x3f\x00\x00\x00")

func _2_createS1UpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_createS1UpSql,
		"2_create-s1.up.sql",
	)
}

func _2_createS1UpSql() (*asset, error) {
	bytes, err := _2_createS1UpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create-s1.up.sql", size: 63, mode: os.FileMode(493), modTime: time.Unix(1728663783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create-tables.up.sql": _1_createTablesUpSql,
	"2_create-s1.up.sql": _2_createS1UpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_create-tables.up.sql": &bintree{_1_createTablesUpSql, map[string]*bintree{}},
	"2_create-s1.up.sql": &bintree{_2_createS1UpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

